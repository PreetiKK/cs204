#include <bits/stdc++.h> 
using namespace std; 

typedef long long lli;
typedef long li;
#define pf(i,n) for(long i=0;i<n;i++)

int number; 

bool IS_VALID(int cx, int cy, int key,vector<vector<int>> &input,vector<vector<int>> &visited,int n,int m) 
{ 
    if (cx < n && cy < m && cx >= 0 && cy >= 0) { 
        if (visited[cx][cy] == false && input[cx][cy] == key) 
            return true; 
        else
            return false; 
    } 
    else
        return false; 
} 

void BFT(int cx, int cy, int i, int j,vector<vector<int>> &input,vector<vector<int>> &visited,vector<vector<int>> &g_visited,int n,int m) 
{ 
    // considering the case where BFT terminates 
    visited[i][j] = 1; 
    g_visited[i][j] = 1;
    co++;
    if (cx != cy) 
        return; 
  
    int x_move[] = { 0, 0, 1, -1 }; 
    int y_move[] = { 1, -1, 0, 0 }; 
  
    for (int u = 0; u < 4; u++) 
        if (IS_VALID(i + y_move[u], j + x_move[u], cx, input, visited,n,m)) 
            BFT(cx, cy, i + y_move[u], j + x_move[u], input,visited,g_visited,n,m); 
} 
  

void resetting_result(int key,vector<vector<int>> &input,vector<vector<int>> &visited,vector<vector<int>> &result,int n, int m) 
{ 
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            if (visited[i][j] && input[i][j] == key) 
                result[i][j] = visited[i][j]; 
            else
                result[i][j] = 0; 
        } 
    } 
} 
void reset_already_visited(vector<vector<int>> &visited,int n, int m) 
{ 
    for (int i = 0; i < n; i++) 
        for (int j = 0; j < m; j++) 
            visited[i][j] = 0; 
} 


void findingLargestGrid(vector<vector<int>> &input,vector<vector<int>> &visited,vector<vector<int>> &g_visited,vector<vector<int>> &result,int n, int m) 
{ 
    int current_maximum = INT_MIN; 
  
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            if(g_visited[i][j]==0){
                number = 0; 
  
                // check blocks to right 
                if (j < m) 
                    BFT(input[i][j], input[i][j + 1], i, j, input,visited,g_visited,n,m); 
    
                // result update  
                if (number > current_maximum) { 
                    current_maximum = number; 
                    resetting_result(input[i][j], input,visited,result,n,m); 
                } 
                reset_already_visited(visited,n,m); 
                number = 0; 
    
                // check blocks below  
                if (i + 1 < n) 
                    BFT(input[i][j], input[i + 1][j], i, j, input,visited,g_visited,n,m); 
    
                // again updating the result 
                if (number > current_maximum) { 
                    current_maximum = number; 
                    resetting_result(input[i][j], input,visited,result,n,m); 
                } 
            }
            

        } 
    } 
    cout<<current_maximum<<'\n';
    
} 
 
int main() 
{ 
    int M,N,c;
    cin>>N>>M>>c;
    
    vector<vector<int>> input(N);
    
    int temp;
    pf(i,N){
        pf(j,M){
            input[i].push_back(0);
        }
    }
    int x,y;
    pf(i,c){
        cin>>x>>y;
        input[x-1][y-1] = 1;
    }
    

    vector<vector<int>> vis(N);
    vector<vector<int>> g_vis(N);
    vector<vector<int>> res(N);
    
    pf(i,n1){
        pf(j,m1){
            vis[i].push_back(0);
            g_vis[i].push_back(0);
            res[i].push_back(0);
        }
    }
    pf(i,N){
        pf(j,M){
            if(!input[i][j]){
                g_vis[i][j]=1;
            }
        }
    }
    
    findingLargestGrid(input,vis,g_vis,res,N,M); 
    return 0; 
} 
